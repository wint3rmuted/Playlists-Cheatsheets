Command prototype for dynamic port forwarding using SSH
ssh -N -D <address to bind to>:<port to bind to> <username>@<SSH server address>

With the above syntax in mind, we can create a local SOCKS4 application proxy (-N -D) on our Kali Linux machine on TCP port 8080 (127.0.0.1:8080), which will tunnel all incoming traffic to any host in the target network, through the compromised Linux machine, which we log into as student (student@10.11.0.128):

Creating a dynamic SSH tunnel on TCP port 8080 to our target network
kali@kali:~$ sudo ssh -N -D 127.0.0.1:8080 student@10.11.0.128

We can run any network application through HTTP, SOCKS4, and SOCKS5 proxies with the help of ProxyChains.
To configure ProxyChains, we simply edit the main configuration file (/etc/proxychains.conf) and add our SOCKS4 proxy to it:

Adding our SOCKS4 proxy to the ProxyChains configuration file
kali@kali:~$ cat /etc/proxychains.conf
...

[ProxyList]
# add proxy here ...
# meanwile
# defaults set to "tor"
socks4 	127.0.0.1 8080 


To run our tools through our SOCKS4 proxy, we prepend each command with proxychains.
or example, let's attempt to scan the Windows Server 2016 machine on the internal target network using nmap. In this example, we aren't supplying any options to proxychains except for the nmap command and its arguments:

kali@kalFi:~$ sudo proxychains nmap --top-ports=20 -sT -Pn 192.168.1.x


ProxyChains worked as expected, routing all of our traffic to the various ports dynamically, without having to supply individual port forwards.

By default, ProxyChains will attempt to read its configuration file first from the current directory, then from the user's $(HOME)/.proxychains directory, and finally from /etc/proxychains.conf. This allows us to run tools through multiple dynamic tunnels, depending on our needs.

